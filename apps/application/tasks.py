from celery import shared_task
import logging
import re
from django.conf import settings

import requests

from apps.application.bitrix import Bitrix24
from .models import Customer, Manufacturer, TemporaryContact
logger = logging.getLogger(__name__)




@shared_task(name="send_manufacturer_to_bitrix")
def send_manufacturer_to_bitrix(application_id):
    application = Manufacturer.objects.get(id=application_id)

    
    contact_fields = {
        "UF_CRM_FULL_NAME": application.full_name,
        "UF_CRM_TELEGRAM_ID": application.user.telegram_id,
    }

    product_segments = list(application.product_segment.values_list("title", flat=True))
    
    deal_fields = {
        "CATEGORY_ID": 0,
        "TITLE": '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ CRM-—Ñ–æ—Ä–º—ã "Test"',
        "UF_CRM_FULL_NAME": application.full_name,
        "UF_CRM_COMPANY_NAME": application.company_name,
        "UF_CRM_MARKET_EXPERIENCE": application.market_experience,
        "UF_CRM_POSITION": application.position,
        "UF_CRM_MIN_ORDER_QUANTITY": application.min_order_quantity,
        "UF_CRM_PRODUCT_SEGMENT": product_segments,
        "UF_CRM_COMMERCIAL_OFFER_TEXT": application.commercial_offer_text,
        "UF_CRM_PRODUCTION_ADDRESS": application.production_address,
        "UF_CRM_OFFICE_ADDRESS": application.office_address,
        "UF_CRM_WEBSITE": application.website,
        "UF_CRM_HAS_QUALITY_CONTROL": application.has_quality_control,
        "UF_CRM_HAS_CRM": application.has_crm,
        "UF_CRM_HAS_ERP": application.has_erp,
        "UF_CRM_HAS_GEMINI_GERBER": application.has_gemini_gerber,
        "UF_CRM_EMPLOYEE_COUNT": application.employee_count,
        "UF_CRM_OWNS_BUILDING": application.owns_building,
        "UF_CRM_HAS_POWER_ISSUES": application.has_power_issues,
        "UF_CRM_HAS_CREDIT_LOAD": application.has_credit_load,
        "UF_CRM_ORGANIZATION_STRUCTURE": application.organization_structure,
        "UF_CRM_EQUIPMENT_INFO": application.equipment_info,
  
    }


    try:
        bitrix = Bitrix24()
        normalized_phone = "+" + re.sub(r"\D", "", application.phone)
        # temporary_contact = TemporaryContact.objects.filter(phone_number=normalized_phone).last()
        temporary_contact, created = TemporaryContact.objects.get_or_create(phone_number=normalized_phone)
        contact_id = None
        if temporary_contact and temporary_contact.contact_id:
            try:
                result = bitrix.update_contact(temporary_contact.contact_id, contact_fields)
                try:
                    if result.status_code == 400:
                        res = bitrix.add_contact(contact_fields)
                        contact_id = res["result"]
                        temporary_contact.contact_id = contact_id
                        deal_fields["CONTACT_ID"] = contact_id
                        temporary_contact.save()
                        res = bitrix.update_deal(temporary_contact.deal_id, deal_fields)
                        try:
                            if res.status_code == 400:
                                contact_id = temporary_contact.contact_id

                                deal_fields["CONTACT_ID"] = contact_id
                                res = bitrix.add_deal(deal_fields)
                                deal_id = res.get("result")

                                temporary_contact.deal_id = deal_id
                                temporary_contact.save()
                                pass
                        except:
                            pass
                        
                except:
                    pass
                contact_id = temporary_contact.contact_id
            except Exception as e:
                
                print(e)
            if temporary_contact.deal_id:
                try:
                    res = bitrix.update_deal(temporary_contact.deal_id, deal_fields)
                    try:
                        if res.status_code == 400:
                            contact_id = temporary_contact.contact_id

                            deal_fields["CONTACT_ID"] = contact_id
                            res = bitrix.add_deal(deal_fields)
                            deal_id = res.get("result")

                            temporary_contact.deal_id = deal_id
                            temporary_contact.save()
                            pass
                    except:
                        pass
                except Exception as e:
                    print(f"shu yerdan : {e}")
            #TemporaryContact.objects.filter(phone_number=normalized_phone).delete()
        if not contact_id:
            try:
                res = bitrix.add_contact(contact_fields)
                contact_id = res["result"]

                deal_fields["CONTACT_ID"] = contact_id
                res = bitrix.add_deal(deal_fields)
                deal_id = res.get("result")

                temporary_contact.contact_id = contact_id
                temporary_contact.deal_id = deal_id
                temporary_contact.save()
                
                
            except Exception as e:
                print(e)
    except Exception as e:
        print(e)
    


@shared_task(name="send_customer_to_bitrix")
def send_customer_to_bitrix(application_id):
    application = Customer.objects.get(id=application_id)

    
    contact_fields = {
        "UF_CRM_FULL_NAME": application.full_name,
        "UF_CRM_TELEGRAM_ID": application.user.telegram_id,
    }
    
    deal_fields = {
        "CATEGORY_ID": 0,
        "TITLE": '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ CRM-—Ñ–æ—Ä–º—ã "Test"',
        "UF_CRM_FULL_NAME": application.full_name,
        "UF_CRM_COMPANY_NAME": application.company_name,
        "UF_CRM_POSITION": application.position,
        "UF_CRM_WEBSITE": application.website,
        "UF_CRM_LEGAL_ADDRESS": application.legal_address,
        "UF_CRM_MARKETPLACE_BRANDS": application.marketplace_brand,
        "UF_CRM_SEGMENT": ", ".join(application.segment.values_list("title", flat=True)),
        "UF_CRM_PAYMENT_TERMS": application.payment_terms,
  
    }


    try:
        bitrix = Bitrix24()
        normalized_phone = "+" + re.sub(r"\D", "", application.phone)
        # temporary_contact = TemporaryContact.objects.filter(phone_number=normalized_phone).last()
        temporary_contact, created = TemporaryContact.objects.get_or_create(phone_number=normalized_phone)
        contact_id = None
        if temporary_contact and temporary_contact.contact_id:
            try:
                result = bitrix.update_contact(temporary_contact.contact_id, contact_fields)
                try:
                    if result.status_code == 400:
                        res = bitrix.add_contact(contact_fields)
                        contact_id = res["result"]
                        temporary_contact.contact_id = contact_id
                        deal_fields["CONTACT_ID"] = contact_id
                        temporary_contact.save()
                        res = bitrix.update_deal(temporary_contact.deal_id, deal_fields)
                        try:
                            if res.status_code == 400:
                                contact_id = temporary_contact.contact_id

                                deal_fields["CONTACT_ID"] = contact_id
                                res = bitrix.add_deal(deal_fields)
                                deal_id = res.get("result")

                                temporary_contact.deal_id = deal_id
                                temporary_contact.save()
                                pass
                        except:
                            pass
                        
                except:
                    pass
                contact_id = temporary_contact.contact_id
            except Exception as e:
                
                print(e)
            if temporary_contact.deal_id:
                try:
                    res = bitrix.update_deal(temporary_contact.deal_id, deal_fields)
                    try:
                        if res.status_code == 400:
                            contact_id = temporary_contact.contact_id

                            deal_fields["CONTACT_ID"] = contact_id
                            res = bitrix.add_deal(deal_fields)
                            deal_id = res.get("result")

                            temporary_contact.deal_id = deal_id
                            temporary_contact.save()
                            pass
                    except:
                        pass
                except Exception as e:
                    print(f"shu yerdan : {e}")
            #TemporaryContact.objects.filter(phone_number=normalized_phone).delete()
        if not contact_id:
            try:
                res = bitrix.add_contact(contact_fields)
                contact_id = res["result"]

                deal_fields["CONTACT_ID"] = contact_id
                res = bitrix.add_deal(deal_fields)
                deal_id = res.get("result")

                temporary_contact.contact_id = contact_id
                temporary_contact.deal_id = deal_id
                temporary_contact.save()
                
                
            except Exception as e:
                print(e)
    except Exception as e:
        print(e)
    



@shared_task(bind=True, max_retries=3)
def send_status_change_message_task(self, manufacturer_id, new_status, is_created=False):
   
    try:
        manufacturer = Manufacturer.objects.select_related('user').get(id=manufacturer_id)
        telegram_id = manufacturer.user.telegram_id
        if not telegram_id:
            return
        
        if is_created:
            message = (
                f"üì© –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {manufacturer.full_name}!\n\n"
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ <b>{manufacturer.company_name}</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞. "
                f"–ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–∫–æ—Ä–æ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏. ü§ù\n\n"
                f"üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: <b>–í –ø—Ä–æ—Ü–µ—Å—Å–µ</b>"
            )

        elif new_status == Manufacturer.StatusChoices.APPROVED:
            message = (
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {manufacturer.full_name}!\n\n"
                f"–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è <b>{manufacturer.company_name}</b> —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ "
                f"–¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ <b>–Ω–∞–¥—ë–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π</b>.\n\n"
                f"üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: <b>–û–¥–æ–±—Ä–µ–Ω–æ</b>\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ –∂–µ–ª–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —É—Å–ø–µ—Ö–æ–≤! üöÄ"
            )

        elif new_status == Manufacturer.StatusChoices.PAID:
            message = (
                f"üí∞ –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {manufacturer.full_name}, –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É –æ—Ç –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ <b>{manufacturer.company_name}</b>.\n\n"
                f"–í–∞—à –ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –∏ –¥–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ‚úÖ\n\n"
                f"üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: <b>–û–ø–ª–∞—á–µ–Ω–æ</b>\n"
                f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –∂–µ–ª–∞–µ–º –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É! üåü"
            )

        elif new_status == Manufacturer.StatusChoices.CANCELED:
            message = (
                f"‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {manufacturer.full_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏.\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n\n"
                f"üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: <b>–û—Ç–º–µ–Ω–µ–Ω–æ</b>\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å ü§ù"
            )

        else:
            return

        token = settings.BOT_TOKEN  
        if not token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

        url = f"https://api.telegram.org/bot{token}/sendMessage"
        requests.post(url, data={
            "chat_id": telegram_id,
            "text": message,
            "parse_mode": "HTML"
        })

    except Exception as exc:
        self.retry(exc=exc, countdown=10)